expression
	: additive_expression                                   {new expression($1);}
	| expression ',' additive_expression                    {$$->add_expression($3);}
	;

additive_expression
	: multiplicative_expression                             {$$ = $1;}
	| additive_expression '+' multiplicative_expression     {new additive_expression($1,$3,$2);}
	| additive_expression '-' multiplicative_expression     {new additive_expression($1,$3,$2);}
	;


multiplicative_expression
	: cast_expression                                       {$$ = $1;}
	| multiplicative_expression '*' cast_expression         {new multiplicative_expression($1,$3,$2);}
	| multiplicative_expression '/' cast_expression         {new multiplicative_expression($1,$3,$2);}
	| multiplicative_expression '%' cast_expression         {new multiplicative_expression($1,$3,$2);}
	;


/* cast_expression is removed as it is not supported */
cast_expression                                             
	: unary_expression                                      {$$ = $1;}
/*	| '(' type_name ')' cast_expression */
	;

/* INC_OP, DEC_OP are removed as they are a beginner feature */
/* SIZEOF is removed as it is an advanced feature */
unary_expression
	: postfix_expression                                    {$$ = $1;}
/*	| INC_OP unary_expression */
/*	| DEC_OP unary_expression */
	| unary_operator cast_expression                        {new unary_expression($1,$2);}
/*	| SIZEOF unary_expression */
/*	| SIZEOF '(' type_name ')' */
	;


unary_operator
	: '&'                                                   {$$ = $1;}
	| '*'                                                   {$$ = $1;}
	| '+'                                                   {$$ = $1;}
	| '-'                                                   {$$ = $1;}
	| '~'                                                   {$$ = $1;}
	| '!'                                                   {$$ = $1;}
	;


/* postfix_expression '[' expression ']' removed as arrays are an intermediate feature */
/* postfix_expression '(' argument_expression_list ')', postfix_expression '(' ')' are removed as function calls are an intermediate feature */
/* postfix_expression '.' IDENTIFIER removed as structs are an advanced feature */
/* postfix_expression PTR_OP IDENTIFIER as pointers are an advanced feature*/
/* INC_OP, DEC_OP are removed as they are a beginner feature */
postfix_expression
	: primary_expression                                    {$$ = $1;}
	/*| postfix_expression '[' expression ']'*/
	/*| postfix_expression '(' ')'*/
	/*| postfix_expression '(' argument_expression_list ')'*/
	/*| postfix_expression '.' IDENTIFIER*/
	/*| postfix_expression PTR_OP IDENTIFIER*/
	/*| postfix_expression INC_OP*/
	/*| postfix_expression DEC_OP*/
	;

/* STRING_LITERAL is removed as it is an intermidiate feature  */
primary_expression
	: IDENTIFIER                                            { $$ = new Identifier(*$1); }
	| CONSTANT                                              { $$ = new Constant($1); }
/*	| STRING_LITERAL */
	| '(' expression ')'                                    { $$ = $2; }
	;